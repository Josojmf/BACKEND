# import Date, ObjectID from "./scalars.graphql"
# import Submission from "./submission.graphql"

directive @authRequired(
  requires: [Role] = [ADMIN],
) on QUERY | FIELD

enum Role {
  ADMIN
  USER
  EPHEMERAL
}

type Query {
  exercises: [Exercise]                                   @authRequired(requires: [USER])
  exercise(id: ObjectID!): Exercise                       @authRequired(requires: [EPHEMERAL, USER])
  exercisesByDocument(document: ObjectID!): [Exercise]    @authRequired(requires: [USER])
}
type Mutation {
  createExercise(input: ExerciseIn!): Exercise                        @authRequired(requires: [USER])
  changeSubmissionsState(id: ObjectID!, subState: Boolean!): Exercise @authRequired(requires: [USER])
  updateExercise(id: ObjectID!, input: ExerciseIn): Exercise          @authRequired(requires: [USER])
  deleteExercise(id: ObjectID!, code: String!): Exercise              @authRequired(requires: [USER])
}

type Exercise {
  id: ObjectID
  document: ObjectID
  user: ObjectID
  title: String
  content: String
  cache: String
  code: String
  type: String
  description: String
  teacherName: String
  acceptSubmissions: Boolean
  image: String
  expireDate: Date
  createdAt: Date
  updatedAt: Date
  submissions: [Submission]
}

input ExerciseIn {
  document: ObjectID
  title: String
  code: String
  description: String
  acceptSubmissions: Boolean
  expireDate: Date
}

