# import Date, ObjectID from "./scalars.graphql"
# import Exercise from "./exercise.graphql"

directive @authRequired(
  requires: [Role] = [ADMIN],
) on QUERY | FIELD

enum Role {
  ADMIN
  USER
  EPHEMERAL
}

type Query {
  submissions: [Submission]                                 @authRequired(requires: [USER])
  submission(id: ObjectID): Submission                      @authRequired(requires: [EPHEMERAL, USER])
  submissionsByExercise(exercise: ObjectID!): [Submission]  @authRequired(requires: [USER])
}
type Mutation {
  loginSubmission(exerciseCode: String!, studentNick: String!, password: String!): loginOut
  updateSubmission(input: SubmissionIn): Submission                                           @authRequired(requires: [EPHEMERAL])
  finishSubmission(content: String, cache: String, studentComment: String): Submission   @authRequired(requires: [EPHEMERAL])
  cancelSubmission: Submission                                                                @authRequired(requires: [EPHEMERAL])
  deleteSubmission(submissionID: ObjectID!): Submission                                       @authRequired(requires: [USER])
  gradeSubmission(submissionID: ObjectID, grade: Float, teacherComment: String): Submission   @authRequired(requires: [USER])
}
type Subscription {
  submissionUpdated(exercise: ObjectID!): Submission   @authRequired(requires: [USER])
}

type Submission {
  id: ObjectID
  title: String
  exercise: ObjectID
  user: ObjectID
  document: ObjectID
  studentNick: String
  password: String
  content: String
  cache: String
  submissionToken: String
  finished: Boolean
  studentComment: String
  type: String
  createdAt: Date
  updatedAt: Date
  finishedAt: Date
  grade: Float
  teacherComment: String
  gradedAt: Date
}
input SubmissionIn {
  title: String
  finished: Boolean
  studentComment: String
  studentNick: String
  content: String
  cache: String
  type: String
}
type loginOut {
  token: String
  exerciseID: String
  type: String
}
